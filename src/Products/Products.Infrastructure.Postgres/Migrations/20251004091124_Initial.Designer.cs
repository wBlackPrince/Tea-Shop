// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Products.Infrastructure.Postgres;

#nullable disable

namespace Products.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(ProductsDbContext))]
    [Migration("20251004091124_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("products")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Products.Domain.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<float>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<int>("CountRatings")
                        .HasColumnType("integer")
                        .HasColumnName("count_ratings");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.PrimitiveCollection<Guid[]>("PhotosIds")
                        .IsRequired()
                        .HasColumnType("uuid[]")
                        .HasColumnName("photos_ids");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("season");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("stock_quantity");

                    b.Property<int>("SumRatings")
                        .HasColumnType("integer")
                        .HasColumnName("sum_ratings");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", "products");
                });

            modelBuilder.Entity("Products.Domain.ProductsTags", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.Property<Guid>("product_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_products_tags_id");

                    b.HasIndex("TagId");

                    b.HasIndex("product_id");

                    b.ToTable("products_tags", "products");
                });

            modelBuilder.Entity("Products.Domain.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", "products");
                });

            modelBuilder.Entity("Products.Domain.Product", b =>
                {
                    b.OwnsOne("Products.Domain.PreparationMethod", "PreparationMethod", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("preparation_description");

                            b1.Property<int>("PreparationTime")
                                .HasColumnType("integer")
                                .HasColumnName("preparation_time");

                            b1.HasKey("ProductId");

                            b1.ToTable("products", "products");

                            b1.ToJson("ingredients");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsMany("Products.Domain.Ingrendient", "Ingredients", b2 =>
                                {
                                    b2.Property<Guid>("PreparationMethodProductId")
                                        .HasColumnType("uuid");

                                    b2.Property<int>("__synthesizedOrdinal")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer");

                                    b2.Property<float>("Amount")
                                        .HasColumnType("real")
                                        .HasColumnName("ingredient_amount");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(2000)
                                        .HasColumnType("character varying(2000)")
                                        .HasColumnName("ingredient_description");

                                    b2.Property<bool>("IsAllergen")
                                        .HasColumnType("boolean")
                                        .HasColumnName("ingredient_is_allergen");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("character varying(50)")
                                        .HasColumnName("ingredient_name");

                                    b2.HasKey("PreparationMethodProductId", "__synthesizedOrdinal");

                                    b2.ToTable("products", "products");

                                    b2.WithOwner()
                                        .HasForeignKey("PreparationMethodProductId");
                                });

                            b1.Navigation("Ingredients");
                        });

                    b.Navigation("PreparationMethod")
                        .IsRequired();
                });

            modelBuilder.Entity("Products.Domain.ProductsTags", b =>
                {
                    b.HasOne("Products.Domain.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Products.Domain.Product", "Product")
                        .WithMany("TagsIds")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Products.Domain.Product", b =>
                {
                    b.Navigation("TagsIds");
                });
#pragma warning restore 612, 618
        }
    }
}
