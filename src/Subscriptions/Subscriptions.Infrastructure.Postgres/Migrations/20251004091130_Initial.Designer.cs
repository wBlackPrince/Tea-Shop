// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Subscriptions.Infrastructure.Postgres;

#nullable disable

namespace Subscriptions.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(SubscriptionsDbContext))]
    [Migration("20251004091130_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("subscriptions")
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Subscriptions.Domain.Kit", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AvatarId")
                        .HasColumnType("uuid")
                        .HasColumnName("avatar_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("ipk_kits");

                    b.ToTable("kits", "subscriptions");
                });

            modelBuilder.Entity("Subscriptions.Domain.KitDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("KitId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sum")
                        .HasColumnType("integer")
                        .HasColumnName("sum");

                    b.HasKey("Id")
                        .HasName("kit_details_pk");

                    b.HasIndex("KitId")
                        .IsUnique();

                    b.ToTable("kits_details", "subscriptions");
                });

            modelBuilder.Entity("Subscriptions.Domain.KitItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<Guid>("KitId")
                        .HasColumnType("uuid")
                        .HasColumnName("kit_id");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("kit_items_id");

                    b.HasIndex("KitId");

                    b.HasIndex("ProductId");

                    b.ToTable("kit_items", "subscriptions");
                });

            modelBuilder.Entity("Subscriptions.Domain.ProductStub", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("products", "products", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Subscriptions.Domain.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("KitId")
                        .HasColumnType("uuid");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("ipk_subscriptions");

                    b.HasIndex("KitId");

                    b.HasIndex("UserId");

                    b.ToTable("subscriptions", "subscriptions");
                });

            modelBuilder.Entity("Subscriptions.Domain.UserStub", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("users", "users", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Subscriptions.Domain.KitDetails", b =>
                {
                    b.HasOne("Subscriptions.Domain.Kit", null)
                        .WithOne("Details")
                        .HasForeignKey("Subscriptions.Domain.KitDetails", "KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Subscriptions.Domain.KitItem", b =>
                {
                    b.HasOne("Subscriptions.Domain.Kit", null)
                        .WithMany("KitItems")
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subscriptions.Domain.ProductStub", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Subscriptions.Domain.Subscription", b =>
                {
                    b.HasOne("Subscriptions.Domain.Kit", "Kit")
                        .WithMany()
                        .HasForeignKey("KitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Subscriptions.Domain.UserStub", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kit");
                });

            modelBuilder.Entity("Subscriptions.Domain.Kit", b =>
                {
                    b.Navigation("Details")
                        .IsRequired();

                    b.Navigation("KitItems");
                });
#pragma warning restore 612, 618
        }
    }
}
