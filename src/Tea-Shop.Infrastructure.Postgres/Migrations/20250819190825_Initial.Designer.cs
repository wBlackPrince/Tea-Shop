// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tea_Shop.Infrastructure.Postgres;

#nullable disable

namespace Tea_Shop.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(ProductsDbContext))]
    [Migration("20250819190825_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tea_Shop.Domain.Products.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("delivery_address");

                    b.Property<DateTime>("ExpectedDeliveryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("order_status");

                    b.Property<string>("PaymentWay")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_way");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("ipk_orders");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Tea_Shop.Domain.Products.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("pk_order_items");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("order_items", (string)null);
                });

            modelBuilder.Entity("Tea_Shop.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<float>("Amount")
                        .HasColumnType("real")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.PrimitiveCollection<Guid[]>("PhotosIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<float>("Price")
                        .HasColumnType("real")
                        .HasColumnName("price");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("season");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Tea_Shop.Domain.Products.ProductsTags", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_products_tags_id");

                    b.HasIndex("ProductId");

                    b.ToTable("products_tags", (string)null);
                });

            modelBuilder.Entity("Tea_Shop.Domain.Products.OrderItem", b =>
                {
                    b.HasOne("Tea_Shop.Domain.Products.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId");

                    b.HasOne("Tea_Shop.Domain.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Tea_Shop.Domain.Products.Product", b =>
                {
                    b.OwnsMany("Tea_Shop.Domain.Products.Ingrendient", "Ingrindients", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<int>("__synthesizedOrdinal")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<float>("Amount")
                                .HasColumnType("real")
                                .HasColumnName("ingredient_amount");

                            b1.Property<bool>("IsAllergen")
                                .HasColumnType("boolean")
                                .HasColumnName("ingredient_is_allergen");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("ingredient_name");

                            b1.HasKey("ProductId", "__synthesizedOrdinal");

                            b1.ToTable("products");

                            b1.ToJson("ingredients");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.OwnsOne("Tea_Shop.Domain.Products.PreparationMethod", "PreparationMethod", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("preparation_description");

                            b1.Property<int>("PreparationTime")
                                .HasColumnType("integer")
                                .HasColumnName("preparation_time");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Ingrindients");

                    b.Navigation("PreparationMethod");
                });

            modelBuilder.Entity("Tea_Shop.Domain.Products.ProductsTags", b =>
                {
                    b.HasOne("Tea_Shop.Domain.Products.Product", "Product")
                        .WithMany("TagsIds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Tea_Shop.Domain.Products.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Tea_Shop.Domain.Products.Product", b =>
                {
                    b.Navigation("TagsIds");
                });
#pragma warning restore 612, 618
        }
    }
}
